# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  metrics(relativePath: String): Metrics!
  metricsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: MetricsFilter): MetricsConnection!
  findings(relativePath: String): Findings!
  findingsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: FindingsFilter): FindingsConnection!
  apps(relativePath: String): Apps!
  appsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AppsFilter): AppsConnection!
}

input DocumentFilter {
  metrics: MetricsFilter
  findings: FindingsFilter
  apps: AppsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Metrics | Findings | Apps | Folder

type MetricsData {
  value: Float
  unit: String
  trend: String
}

type Metrics implements Node & Document {
  category: String!
  week: String!
  data: MetricsData
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input MetricsDataFilter {
  value: NumberFilter
  unit: StringFilter
  trend: StringFilter
}

input MetricsFilter {
  category: StringFilter
  week: StringFilter
  data: MetricsDataFilter
}

type MetricsConnectionEdges {
  cursor: String!
  node: Metrics
}

type MetricsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [MetricsConnectionEdges]
}

type Findings implements Node & Document {
  title: String!
  category: String!
  week: String!
  date: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input FindingsFilter {
  title: StringFilter
  category: StringFilter
  week: StringFilter
  date: DatetimeFilter
  body: RichTextFilter
}

type FindingsConnectionEdges {
  cursor: String!
  node: Findings
}

type FindingsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [FindingsConnectionEdges]
}

type Apps implements Node & Document {
  title: String!
  status: String
  description: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AppsFilter {
  title: StringFilter
  status: StringFilter
  description: StringFilter
  body: RichTextFilter
}

type AppsConnectionEdges {
  cursor: String!
  node: Apps
}

type AppsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AppsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateMetrics(relativePath: String!, params: MetricsMutation!): Metrics!
  createMetrics(relativePath: String!, params: MetricsMutation!): Metrics!
  updateFindings(relativePath: String!, params: FindingsMutation!): Findings!
  createFindings(relativePath: String!, params: FindingsMutation!): Findings!
  updateApps(relativePath: String!, params: AppsMutation!): Apps!
  createApps(relativePath: String!, params: AppsMutation!): Apps!
}

input DocumentUpdateMutation {
  metrics: MetricsMutation
  findings: FindingsMutation
  apps: AppsMutation
  relativePath: String
}

input DocumentMutation {
  metrics: MetricsMutation
  findings: FindingsMutation
  apps: AppsMutation
}

input MetricsDataMutation {
  value: Float
  unit: String
  trend: String
}

input MetricsMutation {
  category: String
  week: String
  data: MetricsDataMutation
}

input FindingsMutation {
  title: String
  category: String
  week: String
  date: String
  body: JSON
}

input AppsMutation {
  title: String
  status: String
  description: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
