//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  metrics: Metrics;
  metricsConnection: MetricsConnection;
  findings: Findings;
  findingsConnection: FindingsConnection;
  apps: Apps;
  appsConnection: AppsConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryMetricsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryMetricsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<MetricsFilter>;
};


export type QueryFindingsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryFindingsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<FindingsFilter>;
};


export type QueryAppsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryAppsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<AppsFilter>;
};

export type DocumentFilter = {
  metrics?: InputMaybe<MetricsFilter>;
  findings?: InputMaybe<FindingsFilter>;
  apps?: InputMaybe<AppsFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Metrics | Findings | Apps | Folder;

export type MetricsData = {
  __typename?: 'MetricsData';
  value?: Maybe<Scalars['Float']['output']>;
  unit?: Maybe<Scalars['String']['output']>;
  trend?: Maybe<Scalars['String']['output']>;
};

export type Metrics = Node & Document & {
  __typename?: 'Metrics';
  category: Scalars['String']['output'];
  week: Scalars['String']['output'];
  data?: Maybe<MetricsData>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type MetricsDataFilter = {
  value?: InputMaybe<NumberFilter>;
  unit?: InputMaybe<StringFilter>;
  trend?: InputMaybe<StringFilter>;
};

export type MetricsFilter = {
  category?: InputMaybe<StringFilter>;
  week?: InputMaybe<StringFilter>;
  data?: InputMaybe<MetricsDataFilter>;
};

export type MetricsConnectionEdges = {
  __typename?: 'MetricsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Metrics>;
};

export type MetricsConnection = Connection & {
  __typename?: 'MetricsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<MetricsConnectionEdges>>>;
};

export type Findings = Node & Document & {
  __typename?: 'Findings';
  title: Scalars['String']['output'];
  category: Scalars['String']['output'];
  week: Scalars['String']['output'];
  date: Scalars['String']['output'];
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FindingsFilter = {
  title?: InputMaybe<StringFilter>;
  category?: InputMaybe<StringFilter>;
  week?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type FindingsConnectionEdges = {
  __typename?: 'FindingsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Findings>;
};

export type FindingsConnection = Connection & {
  __typename?: 'FindingsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<FindingsConnectionEdges>>>;
};

export type Apps = Node & Document & {
  __typename?: 'Apps';
  title: Scalars['String']['output'];
  status?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['JSON']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type AppsFilter = {
  title?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type AppsConnectionEdges = {
  __typename?: 'AppsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Apps>;
};

export type AppsConnection = Connection & {
  __typename?: 'AppsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<AppsConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateMetrics: Metrics;
  createMetrics: Metrics;
  updateFindings: Findings;
  createFindings: Findings;
  updateApps: Apps;
  createApps: Apps;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateMetricsArgs = {
  relativePath: Scalars['String']['input'];
  params: MetricsMutation;
};


export type MutationCreateMetricsArgs = {
  relativePath: Scalars['String']['input'];
  params: MetricsMutation;
};


export type MutationUpdateFindingsArgs = {
  relativePath: Scalars['String']['input'];
  params: FindingsMutation;
};


export type MutationCreateFindingsArgs = {
  relativePath: Scalars['String']['input'];
  params: FindingsMutation;
};


export type MutationUpdateAppsArgs = {
  relativePath: Scalars['String']['input'];
  params: AppsMutation;
};


export type MutationCreateAppsArgs = {
  relativePath: Scalars['String']['input'];
  params: AppsMutation;
};

export type DocumentUpdateMutation = {
  metrics?: InputMaybe<MetricsMutation>;
  findings?: InputMaybe<FindingsMutation>;
  apps?: InputMaybe<AppsMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  metrics?: InputMaybe<MetricsMutation>;
  findings?: InputMaybe<FindingsMutation>;
  apps?: InputMaybe<AppsMutation>;
};

export type MetricsDataMutation = {
  value?: InputMaybe<Scalars['Float']['input']>;
  unit?: InputMaybe<Scalars['String']['input']>;
  trend?: InputMaybe<Scalars['String']['input']>;
};

export type MetricsMutation = {
  category?: InputMaybe<Scalars['String']['input']>;
  week?: InputMaybe<Scalars['String']['input']>;
  data?: InputMaybe<MetricsDataMutation>;
};

export type FindingsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
  week?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type AppsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type MetricsPartsFragment = { __typename: 'Metrics', category: string, week: string, data?: { __typename: 'MetricsData', value?: number | null, unit?: string | null, trend?: string | null } | null };

export type FindingsPartsFragment = { __typename: 'Findings', title: string, category: string, week: string, date: string, body?: any | null };

export type AppsPartsFragment = { __typename: 'Apps', title: string, status?: string | null, description?: any | null, body?: any | null };

export type MetricsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type MetricsQuery = { __typename?: 'Query', metrics: { __typename: 'Metrics', id: string, category: string, week: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data?: { __typename: 'MetricsData', value?: number | null, unit?: string | null, trend?: string | null } | null } };

export type MetricsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<MetricsFilter>;
}>;


export type MetricsConnectionQuery = { __typename?: 'Query', metricsConnection: { __typename?: 'MetricsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'MetricsConnectionEdges', cursor: string, node?: { __typename: 'Metrics', id: string, category: string, week: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, data?: { __typename: 'MetricsData', value?: number | null, unit?: string | null, trend?: string | null } | null } | null } | null> | null } };

export type FindingsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type FindingsQuery = { __typename?: 'Query', findings: { __typename: 'Findings', id: string, title: string, category: string, week: string, date: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type FindingsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<FindingsFilter>;
}>;


export type FindingsConnectionQuery = { __typename?: 'Query', findingsConnection: { __typename?: 'FindingsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'FindingsConnectionEdges', cursor: string, node?: { __typename: 'Findings', id: string, title: string, category: string, week: string, date: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type AppsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type AppsQuery = { __typename?: 'Query', apps: { __typename: 'Apps', id: string, title: string, status?: string | null, description?: any | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type AppsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<AppsFilter>;
}>;


export type AppsConnectionQuery = { __typename?: 'Query', appsConnection: { __typename?: 'AppsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'AppsConnectionEdges', cursor: string, node?: { __typename: 'Apps', id: string, title: string, status?: string | null, description?: any | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const MetricsPartsFragmentDoc = gql`
    fragment MetricsParts on Metrics {
  __typename
  category
  week
  data {
    __typename
    value
    unit
    trend
  }
}
    `;
export const FindingsPartsFragmentDoc = gql`
    fragment FindingsParts on Findings {
  __typename
  title
  category
  week
  date
  body
}
    `;
export const AppsPartsFragmentDoc = gql`
    fragment AppsParts on Apps {
  __typename
  title
  status
  description
  body
}
    `;
export const MetricsDocument = gql`
    query metrics($relativePath: String!) {
  metrics(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...MetricsParts
  }
}
    ${MetricsPartsFragmentDoc}`;
export const MetricsConnectionDocument = gql`
    query metricsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: MetricsFilter) {
  metricsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...MetricsParts
      }
    }
  }
}
    ${MetricsPartsFragmentDoc}`;
export const FindingsDocument = gql`
    query findings($relativePath: String!) {
  findings(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...FindingsParts
  }
}
    ${FindingsPartsFragmentDoc}`;
export const FindingsConnectionDocument = gql`
    query findingsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: FindingsFilter) {
  findingsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...FindingsParts
      }
    }
  }
}
    ${FindingsPartsFragmentDoc}`;
export const AppsDocument = gql`
    query apps($relativePath: String!) {
  apps(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...AppsParts
  }
}
    ${AppsPartsFragmentDoc}`;
export const AppsConnectionDocument = gql`
    query appsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: AppsFilter) {
  appsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...AppsParts
      }
    }
  }
}
    ${AppsPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      metrics(variables: MetricsQueryVariables, options?: C): Promise<{data: MetricsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MetricsQueryVariables, query: string}> {
        return requester<{data: MetricsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MetricsQueryVariables, query: string}, MetricsQueryVariables>(MetricsDocument, variables, options);
      },
    metricsConnection(variables?: MetricsConnectionQueryVariables, options?: C): Promise<{data: MetricsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MetricsConnectionQueryVariables, query: string}> {
        return requester<{data: MetricsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MetricsConnectionQueryVariables, query: string}, MetricsConnectionQueryVariables>(MetricsConnectionDocument, variables, options);
      },
    findings(variables: FindingsQueryVariables, options?: C): Promise<{data: FindingsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: FindingsQueryVariables, query: string}> {
        return requester<{data: FindingsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: FindingsQueryVariables, query: string}, FindingsQueryVariables>(FindingsDocument, variables, options);
      },
    findingsConnection(variables?: FindingsConnectionQueryVariables, options?: C): Promise<{data: FindingsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: FindingsConnectionQueryVariables, query: string}> {
        return requester<{data: FindingsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: FindingsConnectionQueryVariables, query: string}, FindingsConnectionQueryVariables>(FindingsConnectionDocument, variables, options);
      },
    apps(variables: AppsQueryVariables, options?: C): Promise<{data: AppsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AppsQueryVariables, query: string}> {
        return requester<{data: AppsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AppsQueryVariables, query: string}, AppsQueryVariables>(AppsDocument, variables, options);
      },
    appsConnection(variables?: AppsConnectionQueryVariables, options?: C): Promise<{data: AppsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AppsConnectionQueryVariables, query: string}> {
        return requester<{data: AppsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AppsConnectionQueryVariables, query: string}, AppsConnectionQueryVariables>(AppsConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  